/**
 * This code was generated by Builder.io
 */
"use client";
import React, { useState } from "react";
import { Message } from "./FinancialAdvisor";
import { GoogleGenerativeAI } from "@google/generative-ai";

interface ChatInputProps {
  onSendMessage: (message: Message) => void;
}

const ChatInput: React.FC<ChatInputProps> = ({onSendMessage}) => {
  const [inputText, setInputText] = useState("");

  // Function to handle input changes
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInputText(event.target.value);
  };

  // Function to handle form submission and make the API call
  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    const userPrompt : Message = {
      text: inputText,
      isUser: true,
    }

    if (inputText.trim()) {
      onSendMessage(userPrompt);
      setInputText("");
    }

    try {
      if (!process.env.NEXT_PUBLIC_GEMINI_API_KEY) throw Error("No valid API key.");
      const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY);
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      const prompt = userPrompt.text;

      const result = await model.generateContent(prompt);
      console.log("API response:", result.response.text());

      const responseText = result.response.text();

      if (responseText.trim()) {
        onSendMessage({
          text: responseText,
          isUser: false,
        });
      }

    } catch (error) {
      console.error("Error making API call:", error);
    }
  };

  return (
    <form className="self-stretch mt-8 mb-8 mx-5 flex-end" onSubmit={handleSubmit}>
      <label htmlFor="chatInput" className="sr-only">
        Write a message
      </label>
      <input
        id="chatInput"
        type="text"
        className="px-5 pt-3 pb-5 w-full text-base bg-white bg-opacity-20 rounded-[50px] text-white text-opacity-50"
        placeholder="Write a message..."
        aria-label="Write a message"
        value={inputText}
        onChange={handleInputChange}
      />
    </form>
  );
};

export default ChatInput;
