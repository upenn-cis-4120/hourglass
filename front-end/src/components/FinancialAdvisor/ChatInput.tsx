/**
 * This code was generated by Builder.io
 */

"use client";
import React, { useState } from "react";
import { Message } from "./FinancialAdvisor";
import { GoogleGenerativeAI, GenerationConfig } from "@google/generative-ai";
import useBudgetStore from "../SpendingDashboard/BudgetStore";

interface ChatInputProps {
  onSendMessage: (message: Message) => void;
  onDashboardChange: any
}

// Define types for budget data
interface BudgetData {
  currentCashFlow: number;
  remainingBudget: number;
  spent: number;
  earned: number;
}

// Define the structure of the response schema
interface ResponseSchema {
  response: string;
  updated: BudgetData;
}


// const generationConfig : any = {
//   temperature: 0.5,
//   topP: 0.95,
//   topK: 40,
//   maxOutputTokens: 2048,
//   responseMimeType: "application/json",
//   responseSchema: {
//     type: "object",
//     properties: {
//       response: {
//         type: "string"
//       },
//       updated: {
//         type: "object",
//         properties: {
//           currentCashFlow: {
//             type: "integer"
//           },
//           remainingBudget: {
//             type: "integer"
//           },
//           spent: {
//             type: "integer"
//           },
//           earned: {
//             type: "integer"
//           }
//         }
//       }
//     },
//     required: [
//       "response"
//     ]
//   },
// };

const generationConfig : any = {
  temperature: 0.75,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

// const genAI = new GoogleGenerativeAI("AIzaSyDP-DHuTrwak5t7JhLKtt1pnJUItOjdSLo");

if (!process.env.NEXT_PUBLIC_GEMINI_API_KEY) throw Error("No valid API key.");
const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

const chatSession = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "The user will ask about personal fianance advise, followed by a json object of their current budget plan and spending categories in this format for example: {\\ncurrentCashFlow: 5000,\\nremainingBudget: 2000,\\nspent: 1500,\\nearned: 3000,\\nshopping: {left: 100, budget: 200}, travel: {left: 50, budget: 100}, eatingout: {left: 100, budget: 200}, groceries: {left: 100, budget: 200}}\n\nYou should respond with advice by answering their question or suggest and explain changes to their budget plan. Your response should be a updated json object based on the user’s current budget plan, in a format like this, where the response field is required and the number fields must be numbers:\n{\n  \"response\": \"advice and explanation ...\",\n  \"updated\": {\n    \"currentCashFlow\": 5000,\n    \"remainingBudget\": 1750,\n    \"spent\": 1750,\n    \"earned\": 3000,\n    \"shopping\": {\n      \"left\": 50,\n      \"budget\": 100\n    },\n    \"travel\": {\n      \"left\": 25,\n      \"budget\": 50\n    },\n\"eatingout\": {\n      \"left\": 25,\n      \"budget\": 50\n    },\n\"groceries\": {\n      \"left\": 25,\n      \"budget\": 50\n    }\n  }\n}\n\n\nHere is my question:\nHow can I start saving for a down payment for a car of total $10000? Could you suggest an amount I might want to save extra each month? here is my current budget info: budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 2000,\nspent: 1500,\nearned: 3000,\n“shopping”: {“left”: 100, “budget”: 200}, \n“travel”: {“left”: 50, “budget: 100}, \n“eatingout”: {“left”: 100, “budget”: 200}, \n“groceries: {“left”: 100, “budge”t: 200}\n}\nFor suggested changes that involves saving extra $x each month, that means the updated remainingBudget should be initial remainingBudget-x. \n\nThe budgets for each spending category e.g. shopping, travel, eatingout, groceries would decrease as well based on needs. You can decide if / how much to cut the budget for each, but the sum of the cut budget should be $x.\n\nfFelds like currentCashFlow, spent, and earned wouldn't change in this case because we are saving more per month, which isn't really relevant to how much we spent and earned for the month. \n\nThe left amount for each spending category would also decrease by the amount cut from the budget. For example, if I have “shopping”: {“left”: 100, “budget”: 200}, if I cut the budget for shopping by $50, the updated shopping field should be “shopping”: {“left”: 50, “budget”: 150}. \n\nAlso try to prevent making \"left\" amount for any category to be $0, as that would make it non-flexible plan. If it is impossible to save enough when ensuring each category have more than $0 \"left\" amount, your suggested extra save amount should be lower for the current month --- we prefer reaching the saving goal slower in such case and prioritize the user's flexibility instead.  In this case you will suggest the highest but comfortbale amount and update the budget plan for this month, but you can suggest the user to save more for future months."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"To save for a $10,000 down payment, let's aim for a comfortable savings plan that doesn't compromise your current lifestyle too much.  Given your current budget, saving an extra $500 per month seems achievable while maintaining flexibility in your spending categories.  This would allow you to reach your goal within approximately 16.6 months ( $10000 / $600). \\n\\nThis plan reduces your remaining budget, but ensures you maintain some spending flexibility in each category. You might consider increasing your savings in future months as your financial situation improves or as you adjust to your spending habits. For this month specifically, this will allow you to save extra while not making your budget too inflexible. \\n\\nIn the updated budget below, $500 is distributed proportionally among the spending categories. This ensures that you still have a cushion in each area.\",\n  \"updated\": {\n    \"currentCashFlow\": 5000,\n    \"remainingBudget\": 1500,\n    \"spent\": 1500,\n    \"earned\": 3000,\n    \"shopping\": {\n      \"left\": 50,\n      \"budget\": 150\n    },\n    \"travel\": {\n      \"left\": 25,\n      \"budget\": 75\n    },\n    \"eatingout\": {\n      \"left\": 50,\n      \"budget\": 150\n    },\n    \"groceries\": {\n      \"left\": 50,\n      \"budget\": 150\n    }\n  }\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "Could you help to increase my shopping budget a bit? This week is black friday and I want to buy some discount clothes. here is my current budget info: budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 2000,\nspent: 1500,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 200,\n}\n}\nFor prompts or suggestion to increase budget by $x, the updated remainingBudget field should be initial remainingBudget + $x, so in this case, the new remainingBudget could be 2200 if we want to add 200 budget for black friday. Also, the budget and left field for each spending categories should increase by $x/4 if the user doesn't ask to increase budget in a specific spending category. Otherwise, just increase the budget and left amonut for the specified spending category by $x. In this case, we may add $200 budget to left and budget fields of shopping category."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"Given it's Black Friday and you'd like to take advantage of discounts on clothing, let's increase your shopping budget by $200. This will give you more flexibility to shop without significantly impacting other areas of your budget. Your updated budget is shown below.\",\n  \"updated\": {\n    \"currentCashFlow\": 5000,\n    \"remainingBudget\": 2200,\n    \"spent\": 1300,\n    \"earned\": 3000,\n    \"shopping\": {\n      \"left\": 300,\n      \"budget\": 400\n    },\n    \"travel\": {\n      \"left\": 300,\n      \"budget\": 300\n    },\n    \"eatingout\": {\n      \"left\": 150,\n      \"budget\": 200\n    },\n    \"groceries\": {\n      \"left\": 150,\n      \"budget\": 200\n    }\n  }\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "\"I want to save 100$ extra this month. Could you suggest a change to my budget plan? here is my current budget info: budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n}\"\nFor prompts asking to save $x more for the month, the updated remainingBudget should be initial remainingBudget - $x, for example, to save $100 more each month with a initial remainingBudget of $1000, the new remainingBudget should be $1000-$100 = $900. \n\nAlso, the left and budget for each spending category should also be decreased by $x / 4, if the user didn't ask to cut budget in a specific category.  For this example, left and budget for each spending category should decrease by $100 / 4 = $25. Otherwise, decrease the left and budget amount for the specified category by $x.\n\nYou should prevent to make the \"left\" field of any spending category to be 0, which would be very unflexible and not preferred. If it is impossible to prevent, you should suggest a new, smaller extra amount to save to the user and update the plan accordingly, and note to the user that they may save more in future months.\n\nIf the total amount to save or the amount to save for any category is to specific to decimals or single digit, try to round up to at least ten digit (as we prefer to save more maybe)."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"To save an extra $100 this month, we can adjust your budget.  However, reducing each category by $25 to achieve this would leave your 'shopping' category with a 'left' amount of $75, which is too close to zero for comfort and flexibility. To maintain a reasonable level of flexibility, I suggest saving an extra $75 this month instead of $100. You can aim to save the full $100 in future months as your financial situation allows.  This adjusted plan is shown below.\",\n  \"updated\": {\n    \"currentCashFlow\": 5000,\n    \"remainingBudget\": 925,\n    \"spent\": 1075,\n    \"earned\": 3000,\n    \"shopping\": {\n      \"left\": 75,\n      \"budget\": 175\n    },\n    \"travel\": {\n      \"left\": 275,\n      \"budget\": 275\n    },\n    \"eatingout\": {\n      \"left\": 125,\n      \"budget\": 175\n    },\n    \"groceries\": {\n      \"left\": 125,\n      \"budget\": 275\n    }\n  }\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "\"I want to save 80$ extra this month. Could you suggest a change to my budget plan? here is my current budget info: budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n}\""},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"To save an additional $80 this month, we can adjust your budget by reducing each category by $20. This ensures you maintain sufficient flexibility in each area. The updated budget is shown below.\",\n  \"updated\": {\n    \"currentCashFlow\": 5000,\n    \"remainingBudget\": 920,\n    \"spent\": 1080,\n    \"earned\": 3000,\n    \"shopping\": {\n      \"left\": 80,\n      \"budget\": 180\n    },\n    \"travel\": {\n      \"left\": 280,\n      \"budget\": 280\n    },\n    \"eatingout\": {\n      \"left\": 130,\n      \"budget\": 180\n    },\n    \"groceries\": {\n      \"left\": 130,\n      \"budget\": 280\n    }\n  }\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "what does investing mean? budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n}\"\nFor questions like this that is not related to making changes to budget plan, respond with language friendly to someone who is new to personal fiance, in this json format:\n{\"response\": \"Investing means...\"}\nand do not sned along the \"updated\" field in the response if no changes is made to the budget plan."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"Investing means using your money to buy assets that you believe will increase in value over time.  Think of it like planting a seed – you put in some money now (your investment) with the hope of getting more back later (your returns).  There are many ways to invest, such as buying stocks (shares of ownership in a company), bonds (loans to a company or government), or real estate (property).  Each type of investment carries different levels of risk and potential reward.  Investing is generally a long-term strategy, and it's important to understand the risks involved before you start. It's often recommended to start with a small amount and gradually increase your investments as you learn more and become more comfortable.  Consider talking to a financial advisor to get personalized guidance based on your goals and risk tolerance.\"\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "how about a finance joke for today budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n}\""},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"Why did the scarecrow win an award? Because he was outstanding in his field!\"\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "Hello budgetData: budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n} \nFor greetings like this, respond with greeting and 1-2 finance-related prompts the user can try in this format: {\"response\": \"Hello! how can I help you today? you can ask me...\"}"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"Hello! How can I help you today? You can ask me things like:  \\\"How can I increase my savings by $200 this month?\\\", or \\\"What are some good strategies for budgeting for a vacation?\\\"\"\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "Hey, nothing special today budgetData: budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n} \nFor general prompt i.e. not really related to finance like this, respond with general response and 1-2 finance-related prompts the user can try in this format: {\"response\": \"Hello! how can I help you today? you can ask me...\"}"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"Hey there!  Is there anything I can help you with today?  Perhaps you'd like to explore some financial planning options, or maybe you have questions about budgeting or saving strategies?\"\n}\n```"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "hello budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n} \nFor greetings like this, respond with greeting and 1-2 finance-related prompts the user can try in this format: {\"response\": \"Hello! how can I help you today? you can ask me...\"}\nPlease don't list budget details or suggest budget adjustments if the user is just greeting or says something not finance related, even if they added their current budget plan at the end of their prompt."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"Hello! How can I help you manage your finances today? You could ask me about setting savings goals or creating a realistic monthly budget.\"\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "How can I start saving for a down payment for a house? budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n}\nFor a prompt asking for general / vague advise on saving for a more general goal without a specific target amount, suggest a reasonable amount to save per month to the user, give an explanation for the suggestion and predicted time to save for e.g. 6 months to reach the abstract goal, and ask if the user would like to adjust their budget plan according to your suggestion, in the format {\"response\":\"for this goal I would suggest...\"}\n\nIn this case, no need to respond with the updated budget plan (in fact, try not to send along the \"updated\" field for now). Instead, respond with the update plan after the user agrees to change their plan based on your suggestion. For example, if you are asking \"Would you like to proceed with this plan and integrate it into your current budget?\" in your response, DO NOT send along the \"updated\" field in your response json, just have the \"response\" field like this: {\"response\":\"for this goal I would suggest...woudl you like..?\"}. Prevent to send along the \"updated\" field too if you are still finalizing the plan with or asking for more info from the user.\n\nIf the suggested amount to save is too specific e.g. to decimals or single digit, try round up to at least ten's digit."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"Saving for a down payment on a house is a great long-term goal! To give you a realistic plan, let's assume you're aiming for a down payment of around $20,000 (This is just an example; you can adjust this based on your actual target).  Given your current cash flow, I suggest saving $300 per month. This amount is significant enough to make progress toward your goal without overly restricting your current spending. At this rate, you'd reach your $20,000 goal in about 67 months (approximately 5 years and 7 months).  Would you like to proceed with this plan and integrate it into your current budget?\"\n}\n```\n"},
      ],
    },
    {
      role: "user",
      parts: [
        {text: "Could you suggest me a plan to save $200 more this month? budgetData: {\ncurrentCashFlow: 5000,\nremainingBudget: 1000,\nspent: 1000,\nearned: 3000,\nshopping: {\nleft: 100,\nbudget: 200,\n},\ntravel: {\nleft: 300,\nbudget: 300,\n},\neatingout: {\nleft: 150,\nbudget: 200,\n},\ngroceries: {\nleft: 150,\nbudget: 300,\n}\n}\nFor prompts like this, suggest a reasonable amount to save per month to the user, give an explanation for the suggestion, and ask if the user would like to adjust their budget plan according to your suggestion, in the format {\"response\":\"for this goal I would suggest...\"}\n\nIn this case, no need to respond with the updated budget plan. Instead, respond with the update plan after the user agrees to change their plan based on your suggestion.\n\nNote that you should not send along the \"updated\" field in the response json when making a suggestion, instead, only add the \"updated\" field with updated plan after the user accepts your suggestion. Otherwise, if not making a suggestion, you can include the \"updated\" field as usual then."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"response\": \"To save an extra $200 this month, we could reduce spending across several categories. However, drastically cutting back might leave you with little flexibility. I suggest aiming to save $150 this month by reducing each of your non-grocery categories by $37.50. This is more manageable and maintains some spending flexibility. Would you like me to help you adjust your budget plan accordingly? If you'd prefer a more gradual approach, we can discuss strategies for increasing your savings over several months.\"\n}\n```\n"},
      ],
    },
  ],
});

const ChatInput: React.FC<ChatInputProps> = ({onSendMessage, onDashboardChange}) => {
  const budgetData = useBudgetStore((state) => state.budgetData);
  const updateBudgetData = useBudgetStore((state) => state.updateBudgetData);

  const [inputText, setInputText] = useState("");

  // Function to handle input changes
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInputText(event.target.value);
  };

  // Function to handle form submission and make the API call
  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    const userPrompt : Message = {
      text: inputText,
      isUser: true,
    }

    if (inputText.trim()) {
      onSendMessage(userPrompt);
      setInputText("");
    }

    try {
      const prompt = userPrompt.text + " " + JSON.stringify(budgetData);
      console.log("user: "+prompt);

      // const result = await model.generateContent(prompt);
      const result = await chatSession.sendMessage(prompt);
      // console.log("recevied result");
      const responseText = result.response.text();
      // const responseData = result.updated;
      // console.log(responseText);
      // console.log(responseData)
      const responseJSON : ResponseSchema = JSON.parse(result.response.text()) as ResponseSchema;

      if (responseJSON?.response?.trim()) {
        onSendMessage({
          text: responseJSON.response.trim(),
          isUser: false,
        });
      }

      if(responseJSON?.updated){
        console.log("updating data: "+JSON.stringify(responseJSON.updated));
        updateBudgetData(responseJSON.updated);
        onDashboardChange(true);
      }

    } catch (error) {
      console.error("Error making API call:", error);
    }
  };

  return (
    <form className="self-stretch mt-8 mb-8 mx-5 flex-end" onSubmit={handleSubmit}>
      <label htmlFor="chatInput" className="sr-only">
        Write a message
      </label>
      <input
        id="chatInput"
        type="text"
        className="px-5 pt-3 pb-5 w-full text-base bg-white bg-opacity-20 rounded-[50px] text-white text-opacity-50"
        placeholder="Write a message..."
        aria-label="Write a message"
        value={inputText}
        onChange={handleInputChange}
      />
    </form>
  );
};

export default ChatInput;
